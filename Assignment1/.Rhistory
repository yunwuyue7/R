3+4
3+2
for i 1:10:
for (i in 1:100){}
clear
for (j in 1:i) {
if( (i %% j) == 0 ) {
break
}else{
cat(i,"\n")
}
}
for (d1 in 0:9) {
for (d2 in 0:d1) {
if( (sqrt(d1+d2) %% 1) == 0 ) {
cat(d1 , "+", d2, "=", sqrt(d1+d2), "squared \n")
}
}
}
for (i in 1:100) {
for (j in 1:i) {
if( (i %% j) == 0 ) {
break
}else{
cat(i,"\n")
}
}
}
for (d1 in 0:9) {
for (d2 in 0:d1) {
if( (sqrt(d1+d2) %% 1) == 0 ) {
cat(d1 , "+", d2, "=", sqrt(d1+d2), "squared \n")
}
}
}
for (i in 0:100) {
for (j in 0:i) {
if( (i %% j) == 0 ) {
cat(d1 , "+", d2, "=", sqrt(d1+d2), "squared \n")
}
}
}
for (i in 0:100) {
for (j in 0:i) {
if( (i %% j) == 0 ) {
break
}
else{
cat(i)
}
}
}
for (i in 1:100) {
for (j in 1:i) {
if( (i %% j) == 0 ) {
break
}else{
cat(i,"\n")
}
}
}
for (i in 1:10) {
for (j in 1:i) {
if( (i %% j) == 0 ) {
break
}else{
cat(i,"\n")
}
}
}
df <- data.frame(name=c(“jameela”, “erik”, “barack”), age=c(21, 26, 29))
clear
df <- data.frame(name=c(“jameela”, “erik”, “barack”), age=c(21, 26, 29))
df <- data.frame(name=c("jameela", "erik", "barack"), age=c(21, 26, 29))
df[df$name=="erik", "age"]
df[2,2]
df[2, "age"]
df$age[2]
df <- data.frame(name=c(“samir”, “erik”, “barack”), age=c(21, 26, 29))
df <- data.frame(name=c("samir", "erik", "barack"), age=c(21, 26, 29))
data(mtcars)
?mtcars
?mtcars
head(mtcars)
apply(mtcars, 2, summary_stats)
apply(mtcars, 2, summary_stats)
clear
summary_stats = function(x) {
c(Mean = mean(x), Median = median(x), SD = sd(x))
}
apply(mtcars, 2, summary_stats)
c(Mean = mean(x), Median = median(x), SD = sd(x))
apply(mtcars, 2, summary_stats)
# clear environment
# it's always a good idea to start fresh with no variables loaded in the R environment
rm(list = ls())
setwd("C:/Users/shenxuan/Desktop/R/Assignment1/")
install.packages("readr")
library(readr)
df_covid <- read_csv("owid-covid-data.csv")
str(df_covid)
df_usa <- df_covid[df_covid$location=="United States",]
df_usa_dec <- df_usa[df_usa$date>="2020-12-01" & df_usa$date<"2021-01-01",]
sum(df_usa_dec$new_deaths)
usa_dec_2020 <- subset(df_covid, iso_code == "USA" & year(date) == 2020 & month(date) == 12)
library(lubridate)
usa_dec_2020 <- subset(df_covid, iso_code == "USA" & year(date) == 2020 & month(date) == 12)
# calculate the total number of COVID deaths in the USA in December 2020
total_deaths <- sum(usa_dec_2020$total_deaths)
# display the answer to console
cat("The total number of COVID deaths in the USA in December 2020 is:", total_deaths)
library(dplyr)
# filter the data to keep only the rows from Mexico, Canada, and USA, and only the date of Dec 31 2020
df_filtered <- df_covid %>%
filter(location %in% c("Mexico", "Canada", "United States"), date == "2020-12-31")
# group by location and calculate the total deaths for each location
df_total_deaths <- df_filtered %>%
group_by(location) %>%
summarise(total_deaths = sum(total_deaths))
# print the result to console
print(df_total_deaths)
df_select_countries <- df_covid[df_covid$location %in% c("United States","Canada", "Mexico"),]
df_select_countries_end2020 <- df_select_countries[df_select_countries$date=="2020-12-31",c("location", "total_deaths")]
df_select_countries_end2020
df_end2020 <- df_covid[df_covid$date=="2020-12-31", c("location", "total_cases")]
df_end2020_countries <- df_end2020[!df_end2020$location %in% c("Europe", "World","Asia", "North America","South America","European Union","Africa", "Oceania"),]
df_end2020_ordered <- df_end2020_countries[order(-df_end2020_countries$total_cases),]
head(df_end2020_ordered, 5)
# filter data for dec 31 2020 and select necessary columns
df_filtered <- df_covid %>%
filter(date == "2020-12-31") %>%
select(location, total_cases)
# sort data by total cases in descending order and select top 5 rows
df_top5 <- df_filtered %>%
arrange(desc(total_cases)) %>%
slice(1:5)
# display result to console
df_top5
df_end2020 <- df_covid[df_covid$date=="2020-12-31", c("location", "total_cases")]
df_end2020_countries <- df_end2020[!df_end2020$location %in% c("Europe", "World","Asia", "North America","South America","European Union","Africa", "Oceania"),]
df_end2020_ordered <- df_end2020_countries[order(-df_end2020_countries$total_cases),]
head(df_end2020_ordered, 5)
df_end2020 <- df_covid[df_covid$date=="2020-12-31", c("location","total_deaths_per_million")]
df_end2020_countries <- df_end2020[!df_end2020$location %in% c("Europe","World", "Asia","North America","South America","European Union","Africa"),]
df_end2020_ordered <- df_end2020_countries[order(-df_end2020_countries$total_deaths_per_million),]
head(df_end2020_ordered, 5)
# filter data for Dec 31, 2020
df_dec <- df_covid %>% filter(date == as.Date("2020-12-31"))
# calculate death rate per 100,000 population
df_death_rate <- df_dec %>%
mutate(death_rate = total_deaths / population * 100000) %>%
select(location, death_rate)
# sort by death rate in descending order and select top 5
df_top5_death_rate <- df_death_rate %>%
arrange(desc(death_rate)) %>%
head(5)
# display result
df_top5_death_rate
df_dec <- df_covid %>% filter(date == as.Date("2020-12-31"))
# calculate death rate per 100,000 population
df_death_rate <- df_dec %>%
mutate(death_rate = total_deaths / population * 100000) %>%
select(location, death_rate)
# sort by death rate in descending order and select top 5
df_top5_death_rate <- df_death_rate %>%
arrange(desc(death_rate)) %>%
head(5)
# display result
df_top5_death_rate
# Q4: provide solution here (use as many lines of code as you wish)
# filter data for Dec 31, 2020
df_dec <- df_covid %>% filter(date == as.Date("2020-12-31"))
# calculate death rate per 100,000 population
df_death_rate <- df_dec %>%
mutate(death_rate = total_deaths / population * 10000) %>%
select(location, death_rate)
# sort by death rate in descending order and select top 5
df_top5_death_rate <- df_death_rate %>%
arrange(desc(death_rate)) %>%
head(5)
# display result
df_top5_death_rate
# Q4: provide solution here (use as many lines of code as you wish)
# filter data for Dec 31, 2020
df_dec <- df_covid %>% filter(date == as.Date("2020-12-31"))
# calculate death rate per 100,000 population
df_death_rate <- df_dec %>%
mutate(death_rate = total_deaths / population * 1000000) %>%
select(location, death_rate)
# sort by death rate in descending order and select top 5
df_top5_death_rate <- df_death_rate %>%
arrange(desc(death_rate)) %>%
head(5)
# display result
df_top5_death_rate
# Q4: provide solution here (use as many lines of code as you wish)
df_end2020 <- df_covid[df_covid$date=="2020-12-31", c("location","total_deaths_per_million")]
df_end2020_countries <- df_end2020[!df_end2020$location %in% c("Europe","World", "Asia","North America","South America","European Union","Africa"),]
df_end2020_ordered <- df_end2020_countries[order(-df_end2020_countries$total_deaths_per_million),]
head(df_end2020_ordered, 5)
# Q5: provide solution here (use as many lines of code as you wish)
df_usa <- df_covid[df_covid$location=="United States", c("date", "new_cases")]
df_usa <- na.omit(df_usa)
df_usa[df_usa$new_cases==max(df_usa$new_cases, na.rm=TRUE),]
# Q5: provide solution here (use as many lines of code as you wish)
# Filter data for Dec 31, 2020
df_dec31 <- df_covid %>% filter(date == "2020-12-31")
df_dec31 <- df_covid %>% filter(date == "2020-12-31")
# Calculate deaths per million population
df_dec31_deaths <- df_dec31 %>%
select(location, population, total_deaths) %>%
filter(!is.na(population), !is.na(total_deaths)) %>%
mutate(deaths_per_million = total_deaths / (population / 1000000))
# Sort data by deaths per million population and select top 5 countries
df_top5_deaths <- df_dec31_deaths %>%
arrange(desc(deaths_per_million)) %>%
head(5)
# Display the answer to console
df_top5_deaths
# Q5: provide solution here (use as many lines of code as you wish)
df_usa <- df_covid[df_covid$location=="United States", c("date", "new_cases")]
df_usa <- na.omit(df_usa)
df_usa[df_usa$new_cases==max(df_usa$new_cases, na.rm=TRUE),]
# Q6: provide solution here (use as many lines of code as you wish)
df_usa <- df_covid[df_covid$location=="United States", c("date", "people_fully_vaccinated")]
df_usa_sorted <- df_usa[order(-df_usa$people_fully_vaccinated),]
head(df_usa_sorted,1)
# Q6: provide solution here (use as many lines of code as you wish)
# Filter the data for USA and only keep the most recent date
df_usa <- df_covid %>%
filter(location == "United States") %>%
slice_tail(n = 1)
# Get the total number of fully vaccinated people in the USA
total_fully_vaccinated <- df_usa$people_fully_vaccinated
# Display the answer
total_fully_vaccinated
df_usa <- df_covid[df_covid$location=="United States", c("date", "new_vaccinations")]
df_usa_march <- df_usa[df_usa$date>="2021-03-01" & df_usa$date<"2021-04-01",]
mean(df_usa_march$new_vaccinations)
df_usa_mar_2021 <- df_covid %>%
filter(location == "United States",
year(date) == 2021,
month(date) == 3)
total_vaccinations <- sum(df_usa_mar_2021$total_vaccinations, na.rm = TRUE)
avg_vaccinations_per_day <- total_vaccinations / 31
cat("The average number of vaccinations per day in the USA in March 2021 was", round(avg_vaccinations_per_day), "\n")
df_usa <- df_covid[df_covid$location=="United States", c("date", "new_vaccinations")]
df_usa_march <- df_usa[df_usa$date>="2021-03-01" & df_usa$date<"2021-04-01",]
mean(df_usa_march$new_vaccinations)
df_usa_mar_2021 <- df_covid %>%
filter(location == "United States",
year(date) == 2021,
month(date) == 3)
total_vaccinations <- sum(df_usa_mar_2021$total_vaccinations, na.rm = TRUE)
avg_vaccinations_per_day <- total_vaccinations / 31
cat("The average number of vaccinations per day in the USA in March 2021 was", round(avg_vaccinations_per_day), "\n")
df_usa <- df_covid[df_covid$location=="United States", c("date", "new_vaccinations")]
df_usa_march <- df_usa[df_usa$date>="2021-03-01" & df_usa$date<"2021-04-01",]
mean(df_usa_march$new_vaccinations)
df_world <- df_covid[df_covid$location=="World", c("date", "new_cases")]
plot(df_world$date, df_world$new_cases, type = "l")
library(ggplot2)
# subset to world data
df_world <- filter(df_covid, location == "World")
# select date and daily new cases columns
df_cases <- select(df_world, date, new_cases)
# 设置下、左、上、右边距为 3、3、2、2
par(mar=c(3,3,2,2))
# plot daily new cases against date
plot(df_cases$date, df_cases$new_cases, type = "l", xlab = "Date", ylab = "Daily New Cases", main = "Daily Covid Cases in the World")
# filter for countries with population > 50 million
df_pop_filter <- df_covid %>%
filter(population > 50000000)
# filter for March 1, 2021
df_date_filter <- df_pop_filter %>%
filter(date == "2021-03-01")
# sort by total cases
df_sorted <- df_date_filter %>%
arrange(total_cases)
# select the first row
df_result <- df_sorted[1, c("location", "total_cases")]
# display result
print(df_result)
df_all_countries <- df_covid[!df_covid$location %in% c("Europe", "World", "Asia", "North America","South America", "European Union", "Africa"),c("location", "date", "total_cases", "population")]
df_all_countries_high_pop <- df_all_countries[df_all_countries$population>50000000 & df_all_countries$date=="2021-03-01",]
head(df_all_countries_high_pop[order(df_all_countries_high_pop$total_cases),],1)
df_end2020 <- df_covid[df_covid$date=="2020-12-31", c("location", "total_cases")]
df_end2020_land <- df_end2020[grep("land$", df_end2020$location),]
df_end2020_land
# filter the data to include only countries whose name ends with "land"
df_filtered <- df_covid %>%
filter(grepl("land$", location))
# select the columns we want to keep
df_result <- df_filtered %>%
select(location, date, total_cases)
# subset the data to only include the rows with the last date of the year
df_result <- df_result %>%
filter(date == "2020-12-31")
# display the answer to console
df_result
